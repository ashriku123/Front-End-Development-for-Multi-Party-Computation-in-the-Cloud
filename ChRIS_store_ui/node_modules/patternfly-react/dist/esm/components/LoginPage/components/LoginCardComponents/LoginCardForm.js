var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import PropTypes from 'prop-types';
import LoginCardInput from './LoginCardInput';
import LoginCardSettings from './LoginCardSettings';
import LoginFormError from './LoginFormError';
import { Button, Form } from '../../../../index';
import { noop } from '../../../../common/helpers';

var LoginCardForm = function LoginCardForm(_ref) {
  var usernameField = _ref.usernameField,
      passwordField = _ref.passwordField,
      additionalFields = _ref.additionalFields,
      submitText = _ref.submitText,
      disableSubmit = _ref.disableSubmit,
      onSubmit = _ref.onSubmit,
      forgotPassword = _ref.forgotPassword,
      rememberMe = _ref.rememberMe,
      submitError = _ref.submitError,
      showError = _ref.showError,
      attributes = _ref.attributes;
  return React.createElement(
    Form,
    _extends({ onSubmit: onSubmit, noValidate: true }, attributes),
    React.createElement(
      LoginFormError,
      { show: showError },
      submitError
    ),
    React.createElement(LoginCardInput, usernameField),
    React.createElement(LoginCardInput, passwordField),
    additionalFields,
    React.createElement(LoginCardSettings, { rememberMe: rememberMe, forgotPassword: forgotPassword }),
    React.createElement(
      Button,
      {
        className: 'login-pf-submit-button',
        type: 'submit',
        bsStyle: 'primary',
        bsSize: 'large',
        block: true,
        disabled: disableSubmit
      },
      submitText
    )
  );
};

LoginCardForm.propTypes = {
  usernameField: PropTypes.shape(_extends({}, LoginCardInput.propTypes)),
  passwordField: PropTypes.shape(_extends({}, LoginCardInput.propTypes)),
  additionalFields: PropTypes.node,
  submitText: PropTypes.string,
  disableSubmit: PropTypes.bool,
  onSubmit: PropTypes.func,
  forgotPassword: PropTypes.object,
  rememberMe: PropTypes.object,
  submitError: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  showError: PropTypes.bool,
  attributes: PropTypes.object
};

LoginCardForm.defaultProps = {
  usernameField: _extends({}, LoginCardInput.defaultProps, {
    id: 'card_email',
    type: 'email',
    placeholder: 'Email Address'
  }),
  passwordField: _extends({}, LoginCardInput.defaultProps, {
    id: 'card_password',
    type: 'password',
    placeholder: 'Password',
    minLength: 8
  }),
  additionalFields: null,
  submitText: null,
  disableSubmit: false,
  onSubmit: noop,
  forgotPassword: {
    label: null,
    href: '#',
    onClick: noop
  },
  rememberMe: { label: null },
  submitError: null,
  showError: false,
  attributes: null
};

export default LoginCardForm;